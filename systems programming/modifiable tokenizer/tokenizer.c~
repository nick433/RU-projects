/*
 * tokenizer.c
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
 * Tokenizer type.  You need to fill in the type as part of your implementation.
 */

int strIndex = 0; /* Keeps track of the current character position of the string argument */

int numTokens = 0; /* the number of tokens, to be incremented */

int tokenIndex = -1; /* where we are in token array. getNextTk increments by 1 when called */
/*
 * TokenizerT_ represents a token with fields type and text.
 * Each is created dynamically and passed its fields by TKCreate
 */

struct TokenizerT_ {
	
	char* type;
	char* text;

};

typedef struct TokenizerT_ TokenizerT;

/*
 * TKCreate creates a new TokenizerT object for a given token stream
 * (given as a string).
 * 
 * TKCreate should copy the arguments so that it is not dependent on
 * them staying immutable after returning.  (In the future, this may change
 * to increase efficiency.)
 *
 * If the function succeeds, it returns a non-NULL TokenizerT.
 * Else it returns NULL.
 *
 * You need to fill in this function as part of your implementation.
 */

TokenizerT *TKCreate( char * ts ) {
	printf("ent\n");
	int leng = strlen(ts);
	printf("y\n");
	printf("%d\n",leng);	
	char* str;
	str = malloc(sizeof(char)*leng);
	printf("*%s*\n", str);
	printf("ayy");
	strcpy(str,ts);
	printf("lmao");
	TokenizerT* token = malloc(9);
	printf("here1?");
	token->type = "hey";
	token->text = "sheeit";
	printf("2");	
	
	TokenizerT* meep = NULL;
	return token;


}




/*
 * TKDestroy destroys a TokenizerT object.  It should free all dynamically
 * allocated memory that is part of the object being destroyed.
 *
 * You need to fill in this function as part of your implementation.
 */

void TKDestroy( TokenizerT * tk ) {

	free(tk);

}

/*
 * TKGetNextToken returns the next token from the token stream as a
 * character string.  Space for the returned token should be dynamically
 * allocated.  The caller is responsible for freeing the space once it is
 * no longer needed.
 *
 * If the function succeeds, it returns a C string (delimited by '\0')
 * containing the token.  Else it returns 0.
 *
 * You need to fill in this function as part of your implementation.
 */

char *TKGetNextToken( TokenizerT * tk ) {

  return NULL;
}

/*
 * main will have a string argument (in argv[1]).
 * The string argument contains the tokens.
 * Print out the tokens in the second string in left-to-right order.
 * Each token should be printed on a separate line.
 */

int main(int argc, char **argv) {
	if(argc < 2){
		printf("No arguments!");
		return 1;
	}
	if(argc > 2){
		printf("Too many arguments!");
		return 1;
	}


	int length = strlen(argv[1]);
	printf("thissss\n");
	TokenizerT** array = malloc(length * sizeof(TokenizerT)); /*indexed by tokenIndex */
//	while(strIndex<length){
		printf("%s\n",argv[1]);	
		array[tokenIndex] = TKCreate(argv[1]);
		/*		printf("tokens: %s %s\n",array[0]->type,array[0]->text);		 */
//	}	

	


  return 0;



}
